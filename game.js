class Card {
    constructor(id, symbol) {
      this.id = id; //Ïπ¥Îìú Í≥†Ïú† ID
      this.symbol = symbol; //Ïπ¥ÎìúÏóê ÌëúÏãúÎêòÎäî
      this.isMatched = false; //Ïπ¥ÎìúÍ∞Ä Îß§Ïπ≠ÎêòÏóàÎäîÏßÄ
      this.isFlipped = false; //Ïπ¥ÎìúÍ∞Ä Îí§ÏßëÌòîÎäîÏßÄ
    }
    flip() {
      this.isFlipped = true;
    }
    unflip() {
      this.isFlipped = false;
    }
  }
  
  const symbols = ["ü¶ä", "ü¶ù", "üê∂", "üê∏", "üêπ", "üêª", "üê¨", "üê£"]; // Îçî Ï∂îÍ∞ÄÌï¥ÎèÑ Îê®.
  
  const gameState = {
    cards: [], // Ïπ¥Îìú Î∞∞Ïó¥
    flippedCards: [], // Îí§ÏßëÌûå Ïπ¥ÎìúÎì§
    matchedPairs: 0, // Îß§Ïπ≠Îêú ÌéòÏñ¥ Ïàò
    isLocked: false, // Ïπ¥Îìú Îí§ÏßëÍ∏∞ Ïû†Í∏à ÏÉÅÌÉú
    attempts: 0, // ÏãúÎèÑ ÌöüÏàò
    startTime: null, // Í≤åÏûÑ ÏãúÏûë ÏãúÍ∞Ñ
    gameTimer: null, // ÌÉÄÏù¥Î®∏ Ï†ÄÏû• ÌîÑÎ°úÌçºÌã∞
  };
  
  const cardGrid = document.getElementById("card-grid");
  const startBtn = document.getElementById("start-btn");
  const attemptDisplay = document.getElementById("attempts");
  const timerDisplay = document.getElementById("timer");
  
  // Í≤åÏûÑ Ï¥àÍ∏∞Ìôî Ìï®Ïàò
  function initGame() {
    gameState.cards = [];
    gameState.flippedCards = [];
    gameState.attempts = 0;
  
    // UI Ï¥àÍ∏∞Ìôî
    cardGrid.innerHTML = "";
    attemptDisplay.textContent = "0";
  
    // Ïπ¥Îìú ÏÉùÏÑ± & Î∞∞Ïπò
    createCards();
  
    // ÌÉÄÏù¥Î®∏ ÏãúÏûë
    startTimer();
  }
  
  // Ïπ¥Îìú ÏÉùÏÑ± Ìï®Ïàò
  function createCards() {
    let cardSymbols = [...symbols, ...symbols]; //...Î∂ôÏù¥Î©¥ ÎßåÎì† Î¶¨Ïä§Ìä∏Î•º Îã§ Î∂ÑÌï¥ÏãúÌÇ¥. ...Ïïà Î∂ôÏù¥Î©¥ Îëê Í∞úÍ∞Ä ÏåçÏúºÎ°ú Îê® (Ïä§ÌîÑÎ†àÎìú Ïó∞ÏÇ∞Ïûê)
  
    // Fisher-yates ÏïåÍ≥†Î¶¨Ï¶ò (Ïπ¥Îìú ÏÑûÎäîÎã§ÎçòÏßÄ Ìï† Îïå Ïì∞Îäî Ïú†Î™ÖÌïú ÏïåÍ≥†Î¶¨Ï¶ò)
    for (let i = cardSymbols.length - 1; i > 0; i--) {
      let j = Math.floor(Math.random() * (i + 1));
      [cardSymbols[i], cardSymbols[j]] = [cardSymbols[j], cardSymbols[i]]; // Ïπ¥ÎìúÎ•º ÏÑúÎ°ú ÍµêÌôò
    }
  
    cardSymbols.forEach((symbol, index) => {
      // Card ÌÅ¥ÎûòÏä§Ïùò Í∞ùÏ≤¥ ÏÉùÏÑ±
      let card = new Card(index, symbol);
      gameState.cards.push(card);
  
      let cardElement = document.createElement("div");
      cardElement.classList.add("card");
      cardElement.setAttribute("data-id", index);
      cardElement.addEventListener("click", () => handleCardClick(card));
      cardGrid.appendChild(cardElement);
    });
  }
  
  // Ïπ¥Îìú ÌÅ¥Î¶≠ Ìï∏Îì§Îü¨
  function handleCardClick(card) {
    if (gameState.isLocked || card.isFlipped) {
      return;
    }
  
    flipCard(card);
    gameState.flippedCards.push(card);
  
    if (gameState.flippedCards.length === 2) {
      gameState.attempts++;
      attemptDisplay.textContent = gameState.attempts;
      let [firstCard, secondCard] = gameState.flippedCards;
      if (firstCard.symbol === secondCard.symbol) {
        handleMatched();
      } else {
        handleMissMatched();
      }
    }
  }
  
  function handleMatched() {
    gameState.flippedCards.forEach((card) => {
      card.isMatched = true;
      let cardEl = document.querySelector(`[data-id="${card.id}"]`);
      cardEl.classList.add("matched");
    });
    gameState.flippedCards = [];
    gameState.matchedPairs++;
    if (gameState.matchedPairs === symbols.length) {
      endGame();
    }
  }
  
  function handleMissMatched() {
    gameState.isLocked = true;
    setTimeout(() => {
      gameState.flippedCards.forEach((card) => unflipCard(card));
      gameState.flippedCards = [];
      gameState.isLocked = false;
    }, 1000);
  }
  
  // Ïπ¥Îìú Îí§ÏßëÍ∏∞
  function flipCard(card) {
    card.flip();
    let cardEl = document.querySelector(`[data-id="${card.id}"]`);
    cardEl.classList.add("flipped");
    cardEl.textContent = card.symbol;
  }
  
  // Ïπ¥Îìú ÏõêÏúÑÏπò
  function unflipCard(card) {
    card.unflip();
    let cardEl = document.querySelector(`[data-id="${card.id}"]`);
    cardEl.classList.remove("flipped");
    cardEl.textContent = "";
  }
  
  function startTimer() {
    gameState.startTime = Date.now();
    gameState.gameTimer = setInterval(() => {
      let elapsedTime = Math.floor((Date.now() - gameState.startTime) / 1000);
      let minutes = Math.floor(elapsedTime / 60);
      let second = elapsedTime % 60;
      timerDisplay.textContent = minutes + ":" + String(second).padStart(2, "0");
    }, 1000);
  }
  
  function endGame() {
    clearInterval(gameState.gameTimer);
    console.log("ÌÅ¥Î¶¨Ïñ¥~_~");
  }
  
  startBtn.addEventListener("click", initGame);